################################################################
#   This example showcases the use of Google Search and ChatGPT to efficiently summarize literature information. We provide advanced services for AI-driven literature mining, enabling large-scale analysis for knowledge discovery and insights.
#   Author: Bioinformatics Kangaroo
################################################################

import requests
import openai

# Set up API keys
GOOGLE_API_KEY = "xxxx"
GOOGLE_CX_ID = "xxxx"  # Custom Search Engine ID
OPENAI_API_KEY = "xxxx"

# Set up OpenAI API key
openai.api_key = OPENAI_API_KEY

# Define a function to search PubMed articles using Google Custom Search API
def search_pubmed(query):
    search_url = "https://www.googleapis.com/customsearch/v1"
    params = {
        "key": GOOGLE_API_KEY,
        "cx": GOOGLE_CX_ID,
        "q": query,
    }
    response = requests.get(search_url, params=params)
    response.raise_for_status()
    search_results = response.json()
    return search_results.get("items", [])

# Define a function to summarize search results using OpenAI API
def summarize_results(results):
    summaries = []
    for result in results:
        # Extract title and snippet
        title = result.get("title")
        snippet = result.get("snippet")
        url = result.get("link")
        
        # Prepare prompt for OpenAI
        prompt = f"Summarize the following article snippet in the context of PubMed research:\nTitle: {title}\nSnippet: {snippet}\n\nSummary:"
        
        # Call OpenAI API
        response = openai.Completion.create(
            engine="text-davinci-003",
            prompt=prompt,
            max_tokens=100
        )
        summary_text = response.choices[0].text.strip()
        
        summaries.append({"title": title, "summary": summary_text, "url": url})
    return summaries

# Main function to search and summarize PubMed articles
def main(query):
    print(f"Searching for PubMed articles related to: {query}\n")
    results = search_pubmed(query)
    
    if not results:
        print("No results found.")
        return
    
    print("Summarizing search results...\n")
    summaries = summarize_results(results)
    
    for idx, summary in enumerate(summaries, 1):
        print(f"{idx}. Title: {summary['title']}")
        print(f"Summary: {summary['summary']}")
        print(f"URL: {summary['url']}\n")

# Example usage
if __name__ == "__main__":
    query = "Mendelian randomization analysis on cancers"
    main(query)
